name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Consider changing this to true when your workflow is stable.
      fail-fast: false

      matrix:
        include:
          - os: ubuntu-latest
            build_type: Release
            c_compiler: gcc
            cpp_compiler: g++
          - os: macos-latest
            build_type: Release
            c_compiler: clang
            cpp_compiler: clang++
          - os: windows-latest
            build_type: Release
            c_compiler: cl
            cpp_compiler: cl

    steps:
      - uses: actions/checkout@v4

      # Set GCC 14 explicitly for the Ubuntu GCC job
      - name: Set GCC 14 as default
        if: matrix.os == 'ubuntu-latest' && matrix.c_compiler == 'gcc'
        run: |
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-14 100 \
                                   --slave /usr/bin/g++ g++ /usr/bin/g++-14
          sudo update-alternatives --config gcc

      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

        # Speed up non-Windows builds with ccache
      - name: Install ccache (Linux)
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install -y ccache

      - name: Install ccache (macOS)
        if: runner.os == 'macOS'
        run: brew install ccache

      - name: Restore ccache cache
        if: runner.os != 'Windows'
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/ccache
          key: ccache-${{ runner.os }}-${{ matrix.c_compiler }}-${{ matrix.build_type }}-${{ github.sha }}
          restore-keys: |
            ccache-${{ runner.os }}-${{ matrix.c_compiler }}-${{ matrix.build_type }}-
            ccache-${{ runner.os }}-${{ matrix.c_compiler }}-
            ccache-${{ runner.os }}-

        # Cache FetchContent/_deps to avoid re-downloading third-party sources
      - name: Cache CMake deps directory
        uses: actions/cache@v4
        with:
          path: ${{ steps.strings.outputs.build-output-dir }}/_deps
          key: cmake-deps-${{ runner.os }}-${{ matrix.c_compiler }}-${{ hashFiles('**/CMakeLists.txt') }}
          restore-keys: |
            cmake-deps-${{ runner.os }}-${{ matrix.c_compiler }}-
            cmake-deps-${{ runner.os }}-

      - name: Configure CMake
        env:
          # Use ccache transparently on Linux and macOS
          CMAKE_C_COMPILER_LAUNCHER: ${{ runner.os != 'Windows' && 'ccache' || '' }}
          CMAKE_CXX_COMPILER_LAUNCHER: ${{ runner.os != 'Windows' && 'ccache' || '' }}
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DCMAKE_CXX_STANDARD=23
          ${{ runner.os != 'Windows' && format('-DCMAKE_C_COMPILER_LAUNCHER={0}', env.CMAKE_C_COMPILER_LAUNCHER) || '' }}
          ${{ runner.os != 'Windows' && format('-DCMAKE_CXX_COMPILER_LAUNCHER={0}', env.CMAKE_CXX_COMPILER_LAUNCHER) || '' }}
          -S ${{ github.workspace }}

      - name: Build
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} --parallel

      - name: Test
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        run: ctest --build-config ${{ matrix.build_type }} --output-on-failure -j 2

      - name: Upload failure artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.os }}-${{ matrix.c_compiler }}-${{ matrix.build_type }}-artifacts
          path: |
            ${{ steps.strings.outputs.build-output-dir }}/**/LastTest.log
            ${{ steps.strings.outputs.build-output-dir }}/Testing/**/*
            ${{ steps.strings.outputs.build-output-dir }}/compile_commands.json
            ${{ steps.strings.outputs.build-output-dir }}/**/*.exe
            ${{ steps.strings.outputs.build-output-dir }}/**/*.out
            ${{ steps.strings.outputs.build-output-dir }}/**/*.dll
            ${{ steps.strings.outputs.build-output-dir }}/**/*.so
            ${{ steps.strings.outputs.build-output-dir }}/**/*.dylib
